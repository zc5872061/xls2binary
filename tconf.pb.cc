// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tconf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tconf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TconfColDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TconfColDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* TconfRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TconfRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TconfTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TconfTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tconf_2eproto() {
  protobuf_AddDesc_tconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tconf.proto");
  GOOGLE_CHECK(file != NULL);
  TconfColDef_descriptor_ = file->message_type(0);
  static const int TconfColDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfColDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfColDef, type_),
  };
  TconfColDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TconfColDef_descriptor_,
      TconfColDef::default_instance_,
      TconfColDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfColDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfColDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TconfColDef));
  TconfRow_descriptor_ = file->message_type(1);
  static const int TconfRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfRow, values_),
  };
  TconfRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TconfRow_descriptor_,
      TconfRow::default_instance_,
      TconfRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TconfRow));
  TconfTable_descriptor_ = file->message_type(2);
  static const int TconfTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfTable, coldefs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfTable, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfTable, keycolidx_),
  };
  TconfTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TconfTable_descriptor_,
      TconfTable::default_instance_,
      TconfTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TconfTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TconfTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TconfColDef_descriptor_, &TconfColDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TconfRow_descriptor_, &TconfRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TconfTable_descriptor_, &TconfTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tconf_2eproto() {
  delete TconfColDef::default_instance_;
  delete TconfColDef_reflection_;
  delete TconfRow::default_instance_;
  delete TconfRow_reflection_;
  delete TconfTable::default_instance_;
  delete TconfTable_reflection_;
}

void protobuf_AddDesc_tconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013tconf.proto\")\n\013TconfColDef\022\014\n\004name\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\t\"\032\n\010TconfRow\022\016\n\006values\030\001"
    " \003(\t\"W\n\nTconfTable\022\035\n\007colDefs\030\001 \003(\0132\014.Tc"
    "onfColDef\022\027\n\004rows\030\002 \003(\0132\t.TconfRow\022\021\n\tke"
    "yColIdx\030\003 \001(\005", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tconf.proto", &protobuf_RegisterTypes);
  TconfColDef::default_instance_ = new TconfColDef();
  TconfRow::default_instance_ = new TconfRow();
  TconfTable::default_instance_ = new TconfTable();
  TconfColDef::default_instance_->InitAsDefaultInstance();
  TconfRow::default_instance_->InitAsDefaultInstance();
  TconfTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tconf_2eproto {
  StaticDescriptorInitializer_tconf_2eproto() {
    protobuf_AddDesc_tconf_2eproto();
  }
} static_descriptor_initializer_tconf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TconfColDef::kNameFieldNumber;
const int TconfColDef::kTypeFieldNumber;
#endif  // !_MSC_VER

TconfColDef::TconfColDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TconfColDef::InitAsDefaultInstance() {
}

TconfColDef::TconfColDef(const TconfColDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TconfColDef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TconfColDef::~TconfColDef() {
  SharedDtor();
}

void TconfColDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void TconfColDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TconfColDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TconfColDef_descriptor_;
}

const TconfColDef& TconfColDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tconf_2eproto();
  return *default_instance_;
}

TconfColDef* TconfColDef::default_instance_ = NULL;

TconfColDef* TconfColDef::New() const {
  return new TconfColDef;
}

void TconfColDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TconfColDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TconfColDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TconfColDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TconfColDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TconfColDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TconfColDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TconfColDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TconfColDef::MergeFrom(const TconfColDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TconfColDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TconfColDef::CopyFrom(const TconfColDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TconfColDef::IsInitialized() const {

  return true;
}

void TconfColDef::Swap(TconfColDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TconfColDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TconfColDef_descriptor_;
  metadata.reflection = TconfColDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TconfRow::kValuesFieldNumber;
#endif  // !_MSC_VER

TconfRow::TconfRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TconfRow::InitAsDefaultInstance() {
}

TconfRow::TconfRow(const TconfRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TconfRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TconfRow::~TconfRow() {
  SharedDtor();
}

void TconfRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TconfRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TconfRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TconfRow_descriptor_;
}

const TconfRow& TconfRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tconf_2eproto();
  return *default_instance_;
}

TconfRow* TconfRow::default_instance_ = NULL;

TconfRow* TconfRow::New() const {
  return new TconfRow;
}

void TconfRow::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TconfRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TconfRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TconfRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TconfRow::ByteSize() const {
  int total_size = 0;

  // repeated string values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TconfRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TconfRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TconfRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TconfRow::MergeFrom(const TconfRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TconfRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TconfRow::CopyFrom(const TconfRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TconfRow::IsInitialized() const {

  return true;
}

void TconfRow::Swap(TconfRow* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TconfRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TconfRow_descriptor_;
  metadata.reflection = TconfRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TconfTable::kColDefsFieldNumber;
const int TconfTable::kRowsFieldNumber;
const int TconfTable::kKeyColIdxFieldNumber;
#endif  // !_MSC_VER

TconfTable::TconfTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TconfTable::InitAsDefaultInstance() {
}

TconfTable::TconfTable(const TconfTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TconfTable::SharedCtor() {
  _cached_size_ = 0;
  keycolidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TconfTable::~TconfTable() {
  SharedDtor();
}

void TconfTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TconfTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TconfTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TconfTable_descriptor_;
}

const TconfTable& TconfTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tconf_2eproto();
  return *default_instance_;
}

TconfTable* TconfTable::default_instance_ = NULL;

TconfTable* TconfTable::New() const {
  return new TconfTable;
}

void TconfTable::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    keycolidx_ = 0;
  }
  coldefs_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TconfTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TconfColDef colDefs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colDefs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coldefs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_colDefs;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // repeated .TconfRow rows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectTag(24)) goto parse_keyColIdx;
        break;
      }

      // optional int32 keyColIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyColIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keycolidx_)));
          set_has_keycolidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TconfTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TconfColDef colDefs = 1;
  for (int i = 0; i < this->coldefs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coldefs(i), output);
  }

  // repeated .TconfRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  // optional int32 keyColIdx = 3;
  if (has_keycolidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keycolidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TconfTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TconfColDef colDefs = 1;
  for (int i = 0; i < this->coldefs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coldefs(i), target);
  }

  // repeated .TconfRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }

  // optional int32 keyColIdx = 3;
  if (has_keycolidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keycolidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TconfTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 keyColIdx = 3;
    if (has_keycolidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keycolidx());
    }

  }
  // repeated .TconfColDef colDefs = 1;
  total_size += 1 * this->coldefs_size();
  for (int i = 0; i < this->coldefs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coldefs(i));
  }

  // repeated .TconfRow rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TconfTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TconfTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TconfTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TconfTable::MergeFrom(const TconfTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  coldefs_.MergeFrom(from.coldefs_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_keycolidx()) {
      set_keycolidx(from.keycolidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TconfTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TconfTable::CopyFrom(const TconfTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TconfTable::IsInitialized() const {

  return true;
}

void TconfTable::Swap(TconfTable* other) {
  if (other != this) {
    coldefs_.Swap(&other->coldefs_);
    rows_.Swap(&other->rows_);
    std::swap(keycolidx_, other->keycolidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TconfTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TconfTable_descriptor_;
  metadata.reflection = TconfTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
